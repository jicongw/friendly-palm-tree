// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  trips    Trip[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Trip {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinations Destination[]

  @@map("trips")
}

model Destination {
  id                    String  @id @default(cuid())
  name                  String
  description           String?
  latitude              Float?
  longitude             Float?
  address               String?
  daysToStay            Int     @default(1) @map("days_to_stay")
  tripId                String  @map("trip_id")
  order                 Int     @default(0)
  transportationNotes   String? @map("transportation_notes") @db.Text
  transportationType    String? @map("transportation_type") // e.g., "flight", "train", "bus", "car", "ferry"
  transportationDetails String? @map("transportation_details") // e.g., flight number, train route
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  trip       Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  activities Activity[]

  @@map("destinations")
}

model Activity {
  id            String    @id @default(cuid())
  title         String
  description   String?
  scheduledDate DateTime? @map("scheduled_date")
  duration      Int?      // Duration in minutes
  cost          Float?
  category      ActivityCategory @default(OTHER)
  destinationId String    @map("destination_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("activities")
}

enum ActivityCategory {
  ACCOMMODATION
  RESTAURANT
  ATTRACTION
  TRANSPORTATION
  SHOPPING
  ENTERTAINMENT
  OUTDOOR
  CULTURAL
  OTHER
}